// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.0--rc2
// source: proto/user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	UserNotification(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (User_UserNotificationClient, error)
	GetUserInfo(ctx context.Context, opts ...grpc.CallOption) (User_GetUserInfoClient, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) UserNotification(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (User_UserNotificationClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[0], "/user.User/UserNotification", opts...)
	if err != nil {
		return nil, err
	}
	x := &userUserNotificationClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type User_UserNotificationClient interface {
	Recv() (*Notification, error)
	grpc.ClientStream
}

type userUserNotificationClient struct {
	grpc.ClientStream
}

func (x *userUserNotificationClient) Recv() (*Notification, error) {
	m := new(Notification)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *userClient) GetUserInfo(ctx context.Context, opts ...grpc.CallOption) (User_GetUserInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &User_ServiceDesc.Streams[1], "/user.User/GetUserInfo", opts...)
	if err != nil {
		return nil, err
	}
	x := &userGetUserInfoClient{stream}
	return x, nil
}

type User_GetUserInfoClient interface {
	Send(*UserRequest) error
	Recv() (*UserInfo, error)
	grpc.ClientStream
}

type userGetUserInfoClient struct {
	grpc.ClientStream
}

func (x *userGetUserInfoClient) Send(m *UserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *userGetUserInfoClient) Recv() (*UserInfo, error) {
	m := new(UserInfo)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	UserNotification(*UserRequest, User_UserNotificationServer) error
	GetUserInfo(User_GetUserInfoServer) error
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) UserNotification(*UserRequest, User_UserNotificationServer) error {
	return status.Errorf(codes.Unimplemented, "method UserNotification not implemented")
}
func (UnimplementedUserServer) GetUserInfo(User_GetUserInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUserInfo not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_UserNotification_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UserServer).UserNotification(m, &userUserNotificationServer{stream})
}

type User_UserNotificationServer interface {
	Send(*Notification) error
	grpc.ServerStream
}

type userUserNotificationServer struct {
	grpc.ServerStream
}

func (x *userUserNotificationServer) Send(m *Notification) error {
	return x.ServerStream.SendMsg(m)
}

func _User_GetUserInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UserServer).GetUserInfo(&userGetUserInfoServer{stream})
}

type User_GetUserInfoServer interface {
	Send(*UserInfo) error
	Recv() (*UserRequest, error)
	grpc.ServerStream
}

type userGetUserInfoServer struct {
	grpc.ServerStream
}

func (x *userGetUserInfoServer) Send(m *UserInfo) error {
	return x.ServerStream.SendMsg(m)
}

func (x *userGetUserInfoServer) Recv() (*UserRequest, error) {
	m := new(UserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.User",
	HandlerType: (*UserServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UserNotification",
			Handler:       _User_UserNotification_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetUserInfo",
			Handler:       _User_GetUserInfo_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/user.proto",
}
